
import React, { useState, useEffect } from 'react';
import { toast } from 'sonner';
import { useChatMessages } from '@/hooks/useChatMessages';
import { callAI } from '@/services/aiService';
import ChatHeader from '@/components/chat/ChatHeader';
import MessageList from '@/components/chat/MessageList';
import ChatInput from '@/components/chat/ChatInput';

interface ChatPageProps {
  user: { id: string; username?: string };
  selectedAvatar: number;
  onSwipeLeft: () => void;
  onGoToStarMap: () => void;
  onLogout: () => void;
  onResetOnboarding: () => void;
}

const ChatPage: React.FC<ChatPageProps> = ({ 
  user, 
  selectedAvatar, 
  onSwipeLeft, 
  onGoToStarMap, 
  onLogout, 
  onResetOnboarding 
}) => {
  const [inputText, setInputText] = useState('');
  const [aiTyping, setAiTyping] = useState(false);
  const [showTodoCard, setShowTodoCard] = useState(false);
  const touchStartX = React.useRef<number>(0);
  
  const { messages, loading, addMessage, clearMessages, addWelcomeMessage } = useChatMessages(user.id);

  // Add welcome message if no messages exist
  useEffect(() => {
    if (!loading && messages.length === 0) {
      addWelcomeMessage();
    }
  }, [loading, messages.length, addWelcomeMessage]);

  const handleSend = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputText.trim() || aiTyping) return;

    const userMessage = inputText.trim();
    setInputText('');
    
    // Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´ÂæÖÂäû‰∫ãÈ°πÁõ∏ÂÖ≥ÂÖ≥ÈîÆËØç
    const todoKeywords = ['ÂæÖÂäû', '‰ªªÂä°', 'todo', 'ËÆ°Âàí', 'ÂÆâÊéí', 'ÊèêÈÜí'];
    const shouldShowTodo = todoKeywords.some(keyword => 
      userMessage.toLowerCase().includes(keyword)
    );
    
    if (shouldShowTodo) {
      setShowTodoCard(true);
    }
    
    // Add user message
    await addMessage(userMessage, true);
    
    // Show AI typing indicator
    setAiTyping(true);
    
    try {
      let aiResponse = await callAI(userMessage);
      
      // Â¶ÇÊûúÁî®Êà∑ÊèêÂà∞ÂæÖÂäû‰∫ãÈ°πÔºåAIÂõûÂ§ç‰∏≠‰πüÊèêÁ§∫ÂèØ‰ª•Êü•ÁúãÂæÖÂäûÂç°Áâá
      if (shouldShowTodo) {
        aiResponse += '\n\nüìù Êàë‰∏∫‰Ω†ÊòæÁ§∫‰∫ÜÂæÖÂäû‰∫ãÈ°πÂç°ÁâáÔºå‰Ω†ÂèØ‰ª•Áõ¥Êé•Âú®ËøôÈáåÊü•ÁúãÂíåÁÆ°ÁêÜ‰ªªÂä°„ÄÇ';
      }
      
      await addMessage(aiResponse, false);
    } catch (error) {
      console.error('AIË∞ÉÁî®Â§±Ë¥•:', error);
      
      // Show more detailed error message with shorter duration
      const errorMessage = error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ';
      console.log('ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ:', errorMessage);
      
      // Show toast with 2 second duration
      toast.error('AIÊúçÂä°ÊöÇÊó∂‰∏çÂèØÁî®ÔºåËØ∑Á®çÂêéÈáçËØï', {
        duration: 2000
      });
      
      // Use fallback response
      const fallbackResponses = [
        "Êä±Ê≠âÔºåÊàëÁé∞Âú®Êó†Ê≥ïËøûÊé•Âà∞ÊúçÂä°Âô®„ÄÇËÆ©Êàë‰ª¨ÁªßÁª≠ËÅäÂ§©ÂêßÔºÅ",
        "ÁΩëÁªúËøûÊé•‰ºº‰πéÊúâÈóÆÈ¢òÔºå‰∏çËøáÊàë‰ªçÁÑ∂Âú®ËøôÈáåÈô™‰º¥‰Ω†„ÄÇ",
        "ÊäÄÊúØÈóÆÈ¢òÊöÇÊó∂ÈòªÁ¢ç‰∫ÜÊàëÔºå‰ΩÜËøô‰∏çÂΩ±ÂìçÊàë‰ª¨ÁöÑÂØπËØù„ÄÇ"
      ];
      
      const randomResponse = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
      await addMessage(randomResponse, false);
    } finally {
      setAiTyping(false);
    }
  };

  const handleClearChat = async () => {
    if (window.confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâËÅäÂ§©ËÆ∞ÂΩïÂêóÔºü')) {
      await clearMessages();
      toast.success('ËÅäÂ§©ËÆ∞ÂΩïÂ∑≤Ê∏ÖÁ©∫', {
        duration: 2000
      });
    }
  };

  const handleTouchStart = (e: React.TouchEvent) => {
    touchStartX.current = e.touches[0].clientX;
  };

  const handleTouchEnd = (e: React.TouchEvent) => {
    const touchEndX = e.changedTouches[0].clientX;
    const diff = touchStartX.current - touchEndX;
    
    if (diff > 50) { // Â∑¶Êªë
      onSwipeLeft();
    }
  };

  if (loading) {
    return (
      <div className="mobile-container bg-white flex items-center justify-center">
        <div className="text-gray-600">Âä†ËΩΩËÅäÂ§©ËÆ∞ÂΩï‰∏≠...</div>
      </div>
    );
  }

  return (
    <div 
      className="mobile-container bg-white flex flex-col h-screen"
      onTouchStart={handleTouchStart}
      onTouchEnd={handleTouchEnd}
    >
      <ChatHeader
        selectedAvatar={selectedAvatar}
        onAvatarClick={onLogout}
        onClearChat={handleClearChat}
        onOnboardingClick={onResetOnboarding}
        onGoToStarMap={onGoToStarMap}
      />

      <MessageList
        messages={messages}
        aiTyping={aiTyping}
        showTodoCard={showTodoCard}
        onCloseTodoCard={() => setShowTodoCard(false)}
        onGoToTodoList={onSwipeLeft}
      />

      <ChatInput
        inputText={inputText}
        aiTyping={aiTyping}
        onInputChange={setInputText}
        onSubmit={handleSend}
        onGoToTodoList={onSwipeLeft}
      />
    </div>
  );
};

export default ChatPage;
